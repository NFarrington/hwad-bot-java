import groovy.time.TimeCategory

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.1.8.RELEASE'
    id 'io.spring.dependency-management' version '1.0.7.RELEASE'

    id 'com.palantir.docker' version '0.22.1'
}

sourceCompatibility = '11'
targetCompatibility = '11'

archivesBaseName = 'hogwarts-discord-bot'

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.session:spring-session-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.security:spring-security-oauth2-client'
    implementation 'io.pebbletemplates:pebble-spring-boot-2-starter:3.0.9'
    implementation 'org.json:json:20180813'
    implementation 'org.apache.httpcomponents:httpclient'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.liquibase:liquibase-core:3.6.3'
    implementation 'org.hibernate:hibernate-envers', 'org.glassfish.jaxb:jaxb-runtime'
    implementation 'com.h2database:h2'
    implementation 'org.mariadb.jdbc:mariadb-java-client:2.4.1'

    implementation 'com.discord4j:discord4j-core:3.0.3'

    compileOnly 'com.github.spotbugs:spotbugs-annotations:3.1.12'
    compileOnly 'com.google.code.findbugs:jsr305:3.0.2' // used for @Nullable support (avoids compiler warnings)

    testImplementation 'org.springframework.boot:spring-boot-starter-test', {
        exclude group: 'com.vaadin.external.google', module: 'android-json'
    }
}

jar {
    enabled = true
}

bootJar {
    baseName = jar.baseName + '-boot'
}

bootRun {
    systemProperty 'spring.profiles.active', 'dev'
}

test {
    systemProperty 'user.timezone', 'UTC'

    testLogging {
        exceptionFormat "full"
        System.getenv('CI')
            ? events("passed", "skipped", "failed")
            : events("skipped", "failed")
    }

    afterSuite { suite, result ->
        if (suite.parent) return
        printTestResults ":${test.project.name}:${test.name} results: ${result.resultType} " +
            "(" +
            "${result.testCount} tests, " +
            "${result.successfulTestCount} successes, " +
            "${result.failedTestCount} failures, " +
            "${result.skippedTestCount} skipped" +
            ") " +
            "in ${TimeCategory.minus(new Date(result.endTime), new Date(result.startTime))}"
    }
}

docker {
    name 'nfarrington/hogwarts-discord-bot'
    files bootJar.outputs
    buildArgs(['JAR_FILE': "${bootJar.archiveName}"])
    tag 'release', "nfarrington/hogwarts-discord-bot:$version"
    tag 'snapshot', "nfarrington/hogwarts-discord-bot:$version"
}

private static void printTestResults(String results) {
    int maxLength = results.readLines().collect { it.length() }.max()
    println "┌${"${"─" * maxLength}"}┐"
    println results.readLines().collect {
            "│" + it + " " * (maxLength - it.length()) + "│"
        }.join("\n")
    println "└${"${"─" * maxLength}"}┘"
}
